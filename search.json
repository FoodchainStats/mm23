[{"path":"https://foodchainstats.github.io/mm23/articles/contribution.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Calculating contribution to annual rate","text":"mm23 contains functions reproduce calculation items contribution parents annual inflation rate. quite niche, rely data specific structure. Theres real error checking (yet) take care! article explain steps needed reproduce calculation. informed section 11.7 ONS CPI Technical Manual.","code":""},{"path":"https://foodchainstats.github.io/mm23/articles/contribution.html","id":"weights","dir":"Articles","previous_headings":"","what":"Weights","title":"Calculating contribution to annual rate","text":"CPIH weights problem. adjusted twice year (since 2017), December January. mm23 dataset single weight year. place full weights exposed ‘detailed reference tables’ spreadsheet. functions get_cpi*_weights() generates weights dataset. may robust, needs testing, everything right place works OK. returns dataset weight every month.","code":""},{"path":"https://foodchainstats.github.io/mm23/articles/contribution.html","id":"unchaining-and-calculating-contribution","dir":"Articles","previous_headings":"","what":"Unchaining and calculating contribution","title":"Calculating contribution to annual rate","text":"unchain() function can used within mutate() call produce unchained index. based assumption CPI weights change twice year, unchained index based previous January = 100, January index, based previous December = 100. Example code .","code":""},{"path":"https://foodchainstats.github.io/mm23/articles/contribution.html","id":"calculating-contribution-to-all-items-12-month-rate","dir":"Articles","previous_headings":"","what":"Calculating contribution to ‘all items’ 12 month rate","title":"Calculating contribution to annual rate","text":"calculation follows, : \\(c = component\\ c\\) \\(=\\ '\\ items'\\ CPI\\ index\\) \\(W^c_{y} = weight\\ \\ component\\ c\\ \\ year\\ y\\) \\(^c_t = index\\ \\ component\\ c\\ \\ month\\ t\\ based\\ \\ January\\ \\ current\\ year =100\\) \\(^a_{Jan} = \\ items\\ index\\ \\ January\\ based\\ \\ previous\\ month\\ (December) = 100\\) \\(^a_{Dec} = \\ items\\ index\\ \\ December\\ based\\ \\ previous\\ January = 100\\) \\[ (\\frac{W^c_{y-1}} {W^a_{y-1}}) \\times (\\frac{({^c_{Dec}} - {^c_{t-12}})}{^a_{t-12}}) \\times 100 \\ \\ +\\ \\ (\\frac{W^c_y}{W^a_y}) \\times (\\frac{({^c_{Jan}}-100)}{^a_{t-12}}) \\times ^a_{Dec} \\ \\ +\\ \\ (\\frac{W^c_y}{W^a_y}) \\times (\\frac{(^c_t - 100)}{^a_{t-12}}) \\times \\frac{^a_{Jan}}{100} \\times ^a_{Dec} \\] Note ‘items’ doesn’t items CPIH, can category total (food). important calculations performed using unchained indices (.e. based previous January = 100, January index, based previous December =100). month interest, contribution component CPI 12-month rate calculated. done preceding month. differences two contributions change CPI 12-month rate. contribution() function applies calculation wide dataset (1 column month number date, indices weights subsequent columns). can used mutate() call. takes \\(^\\), \\(W^\\), \\(^c\\), \\(W^c\\) parameters, leverages dplyr::lag() rest. Example .","code":""},{"path":"https://foodchainstats.github.io/mm23/articles/contribution.html","id":"contribution---data-setup","dir":"Articles","previous_headings":"","what":"Contribution - data setup","title":"Calculating contribution to annual rate","text":"Lets get data need calculations reduce need lots downloads.","code":"library(mm23) library(dplyr) library(tidyr) library(lubridate) library(ggplot2)  # Get our data together mm23 <- acquire_mm23() data <- get_mm23_month(mm23) cpih_wts <- get_weights(mm23, measure = \"cpih\") cpi_wts <- get_weights(mm23, measure = \"cpi\")"},{"path":"https://foodchainstats.github.io/mm23/articles/contribution.html","id":"cpih-food-weight-contribution","dir":"Articles","previous_headings":"","what":"CPIH food weight contribution","title":"Calculating contribution to annual rate","text":"Code calculate contribution changes food non-alcoholic drinks inflation.","code":"# Select and unchain food indices food_cdids <- c(\"L523\", \"L52I\", \"L52J\", \"L52K\",                 \"L52L\", \"L52M\", \"L52N\", \"L52O\",                 \"L52P\", \"L52Q\", \"L52S\", \"L52T\")   food_unchained <- data |>    filter(cdid %in% food_cdids & date >= \"2017-01-01\") |>    group_by(cdid) |>    mutate(unchained_value = unchain(month(date), value)) |>    select(date, cdid, value = unchained_value)   # Extract the relevant food weights food_weights <- c(\"L5CZ\", \"L5DH\", \"L5DI\", \"L5DJ\",                   \"L5DK\", \"L5DL\", \"L5DM\", \"L5DN\",                   \"L5DO\", \"L5DP\", \"L5DR\", \"L5DS\")   foodwts <- cpih_wts |>    filter(cdid %in% food_weights & date >= \"2017-01-01\")    # Combine the indices and weights and calculate the contribution to annual rate unchained <- food_unchained |>    bind_rows(foodwts) |>    pivot_wider(names_from = cdid)  contribution <- unchained |>              mutate(bread = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52I,                                         component_weight = L5DH),                    meat = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52J,                                         component_weight = L5DI),                    fish = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52K,                                         component_weight = L5DJ),                    dairy = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52L,                                         component_weight = L5DK),                    oils = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52M,                                         component_weight = L5DL),                    fruit = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52N,                                         component_weight = L5DM),                    vegetables = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52O,                                         component_weight = L5DN),                    sugar = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52P,                                         component_weight = L5DO),                    food_nec = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52Q,                                         component_weight = L5DP),                    coffee = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52S,                                         component_weight = L5DR),                    water = contribution(month = month(date),                                         all_items_index = L523,                                         all_items_weight = L5CZ,                                         component_index = L52T,                                         component_weight = L5DS)                    )  tail(contribution) |> knitr::kable() # put the data back into tidy form and plot some results cont <- contribution |>    select(date, bread:water) |>    pivot_longer(cols = bread:water) |>    filter(!is.na(value))  cont |>    filter(date >= \"2021-07-01\") |>    ggplot2::ggplot() +   ggplot2::geom_col(aes(x = date, y = value, fill = name)) +   ggplot2::labs(title = \"Contribution to annual food and non-alc CPIH inflation rate\")"},{"path":"https://foodchainstats.github.io/mm23/articles/contribution.html","id":"cpi-food-weight-contribution","dir":"Articles","previous_headings":"","what":"CPI food weight contribution","title":"Calculating contribution to annual rate","text":"","code":"# Select and unchain food indices food_cdids <- c(\"D7BU\", \"D7D5\", \"D7D6\", \"D7D7\",                 \"D7D8\", \"D7D9\", \"D7DA\", \"D7DB\",                 \"D7DC\",  \"D7DD\",\"D7DE\", \"D7DF\")   food_unchained <- data |>    filter(cdid %in% food_cdids & date >= \"2017-01-01\") |>    group_by(cdid) |>    mutate(     unchained_value = unchain(month(date), value)   ) |>    select(date, cdid, value = unchained_value)   # Extract the relevant food weights food_weights <- c(\"CHZR\", \"CJWB\", \"CJWC\", \"CJWD\",                   \"CJWE\", \"CJWF\", \"CJWG\", \"CJWH\",                   \"CJWI\", \"CJWJ\", \"CJWK\", \"CJWL\")   foodwts <- cpi_wts |>    filter(cdid %in% food_weights & date >= \"2017-01-01\")    # Combine the indices and weights and calculate the contribution to annual rate unchained <- food_unchained |>    bind_rows(foodwts) |>    pivot_wider(names_from = cdid)  contribution <- unchained |>    mutate(`Bread and cereals` = contribution(month = month(date),                               all_items_index = D7BU,                               all_items_weight = CHZR,                               component_index = D7D5,                               component_weight = CJWB),          `Meat` = contribution(month = month(date),                              all_items_index = D7BU,                              all_items_weight = CHZR,                              component_index = D7D6,                              component_weight = CJWC),          `Fish` = contribution(month = month(date),                              all_items_index = D7BU,                              all_items_weight = CHZR,                              component_index = D7D7,                              component_weight = CJWD),          `Milk, cheese and eggs` = contribution(month = month(date),                               all_items_index = D7BU,                               all_items_weight = CHZR,                               component_index = D7D8,                               component_weight = CJWE),          `Oils and fats` = contribution(month = month(date),                              all_items_index = D7BU,                              all_items_weight = CHZR,                              component_index = D7D9,                              component_weight = CJWF),          `Fruit` = contribution(month = month(date),                               all_items_index = D7BU,                               all_items_weight = CHZR,                               component_index = D7DA,                               component_weight = CJWG),          `Vegetables` = contribution(month = month(date),                                    all_items_index = D7BU,                                    all_items_weight = CHZR,                                    component_index = D7DB,                                    component_weight = CJWH),          `Sugar, jam and confectionery` = contribution(month = month(date),                               all_items_index = D7BU,                               all_items_weight = CHZR,                               component_index = D7DC,                               component_weight = CJWI),          `Food products (nec)` = contribution(month = month(date),                                  all_items_index = D7BU,                                  all_items_weight = CHZR,                                  component_index = D7DD,                                  component_weight = CJWJ),          `Coffee and tea` = contribution(month = month(date),                                all_items_index = D7BU,                                all_items_weight = CHZR,                                component_index = D7DE,                                component_weight = CJWK),          `Mineral waters, soft drinks` = contribution(month = month(date),                               all_items_index = D7BU,                               all_items_weight = CHZR,                               component_index = D7DF,                               component_weight = CJWL)   )  tail(contribution) |> knitr::kable() # put the data back into tidy form and plot some results cont <- contribution |>    select(date, `Bread and cereals`:`Mineral waters, soft drinks`) |>    pivot_longer(cols = `Bread and cereals`:`Mineral waters, soft drinks`) |>    filter(!is.na(value))  cont |>    filter(date >= \"2020-01-01\") |>    ggplot2::ggplot() +   ggplot2::geom_col(aes(x = date, y = value, fill = name)) +   ggplot2::labs(title = \"Contribution to annual food and non-alc inflation rate\")"},{"path":"https://foodchainstats.github.io/mm23/articles/mm23.html","id":"get-mm23-data","dir":"Articles","previous_headings":"","what":"Get MM23 data","title":"Getting started with mm23","text":"Download latest MM23 ONS. acquire_mm23() simply downloads full latest mm23.csv file, returns location. default puts temporary file, can specify folder want put . However, raw mm23.csv file user-friendly. key metadata first rows. Yearly, quarterly monthly series values included csv file column. hard unpick data. thousands series included single csv file. mainly mm23 comes .","code":"library(mm23)  # Puts the data in a temporary file and returns its name mm23 <- acquire_mm23() mm23 #> [1] \"/tmp/RtmpO00Qei/file185a14dcb22e\"  # Or specify a location # mm23 <- acquire_mm23(\"~/data\") # data <- read.csv(\"~/data/mm23.csv\")"},{"path":[]},{"path":"https://foodchainstats.github.io/mm23/articles/mm23.html","id":"data","dir":"Articles","previous_headings":"Wrangling MM23 with mm23","what":"Data","title":"Getting started with mm23","text":"get_mm23_* functions return data tidy format specific time frequency (yearly, quarterly monthly). series unique CDID identifier. efficient use acquire_mm23 first download data . used without parameters get_mm23_* functions download latest data automatically.","code":"mm23 <- acquire_mm23() m <- get_mm23_month(mm23) q <- get_mm23_quarter(mm23) y <- get_mm23_year(mm23)"},{"path":"https://foodchainstats.github.io/mm23/articles/mm23.html","id":"metadata","dir":"Articles","previous_headings":"Wrangling MM23 with mm23","what":"Metadata","title":"Getting started with mm23","text":"Use get_mm23_metadata() return details series CDID represents. random sample output. series get_mm23_metadata() extracts category data included puts category field. Equally, infers COICOP digit level adds level field.","code":"mm23::get_mm23_metadata(mm23) |> dplyr::slice_sample(n = 5) |> knitr::kable()"},{"path":"https://foodchainstats.github.io/mm23/articles/mm23.html","id":"joining-data","dir":"Articles","previous_headings":"Wrangling MM23 with mm23","what":"Joining data","title":"Getting started with mm23","text":"can join data metadata CDID, analysis.","code":"data <- get_mm23_month(mm23) metadata <- get_mm23_metadata(mm23)  data |>   dplyr::filter(cdid %in% c(\"L55O\", \"L55P\")) |>   dplyr::left_join(metadata) |>    dplyr::select(date, cdid, value, title, category) |>    head() |>    knitr::kable() data |>   dplyr::filter(cdid %in% c(\"L55O\", \"L55P\")) |>   dplyr::left_join(metadata) |>    dplyr::select(date, cdid, value, title, category) |>    ggplot2::ggplot() +   ggplot2::geom_line(ggplot2::aes(x = date, y = value, colour = title)) +   ggplot2::theme(legend.position = \"bottom\")"},{"path":"https://foodchainstats.github.io/mm23/articles/prices.html","id":"getting-shopping-price-data","dir":"Articles","previous_headings":"","what":"Getting shopping price data","title":"ONS Shopping Price Tool data","text":"Download latest data ONS. acquire_prices() simply downloads full latest data download file, returns location. default puts temporary file, can specify want put . acquire_prices() uses prices_url() download target.","code":"library(mm23)  # Puts the data in a temporary file and returns its name prices <- acquire_prices() prices #> [1] \"/tmp/RtmpQqkp9n/file189d573e64ab\"  # Or specify a location # prices <- acquire_prices(\"~/data\") # data <- readxl::read_excel(\"~/data/datadownload.xlsx\")"},{"path":"https://foodchainstats.github.io/mm23/articles/prices.html","id":"wrangling-prices-data","dir":"Articles","previous_headings":"","what":"Wrangling prices data","title":"ONS Shopping Price Tool data","text":"two complementary functions access prices data. get_price_metadata() returns dataset containing details data series available. get_price_data() return actual data. structure metadata dataset, random record. Join metadata data item_id.","code":"dplyr::slice_sample(mm23::get_price_metadata(prices), n = 1) |> t() |> knitr::kable() items <- mm23::get_price_metadata(prices) |>    dplyr::filter(category2 == \"Crisps\") |>   dplyr::select(item_id) |>   unlist()  mm23::get_price_data(prices) |>    dplyr::filter(item_id %in% items) |>    dplyr::left_join(get_price_metadata(prices)) |>    ggplot2::ggplot() +   ggplot2::geom_line(ggplot2::aes(x = date, y = value, colour = item_desc))"},{"path":"https://foodchainstats.github.io/mm23/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Lee. Author, maintainer.","code":""},{"path":"https://foodchainstats.github.io/mm23/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lee D (2023). mm23: Wrangle ONS MM23 price inflation data. R package version 0.0.0.9000, https://github.com/FoodchainStats/mm23.","code":"@Manual{,   title = {mm23: Wrangle ONS MM23 price inflation data},   author = {David Lee},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/FoodchainStats/mm23}, }"},{"path":"https://foodchainstats.github.io/mm23/index.html","id":"mm23","dir":"","previous_headings":"","what":"Wrangle ONS MM23 price inflation data","title":"Wrangle ONS MM23 price inflation data","text":"Wrangle MM23 data. Functions acquire manipulate consumer price inflation series published Office National Statistics. mm23.csv file publish bit nightmare deal . package aims help get data usable form. core functions based around downloading wrangling MM23 data tidy formats. Additionally functions designed help calculating indices contribution overall 12 month index rate.","code":""},{"path":"https://foodchainstats.github.io/mm23/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Wrangle ONS MM23 price inflation data","text":"can install development version mm23 GitHub : Get started mm23 Calculate index contributions","code":"# install.packages(\"devtools\") devtools::install_github(\"FoodchainStats/mm23\")"},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_mm23.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a raw mm23.csv file — acquire_mm23","title":"Download a raw mm23.csv file — acquire_mm23","text":"acquire_mm23() mainly wrapper download file stored mm23_url(). can optionally specify save downloaded file.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_mm23.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a raw mm23.csv file — acquire_mm23","text":"","code":"acquire_mm23(path)"},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_mm23.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a raw mm23.csv file — acquire_mm23","text":"path Folder put downloaded data . missing tempfile created.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_mm23.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a raw mm23.csv file — acquire_mm23","text":"Path filename downloaded file.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_mm23.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a raw mm23.csv file — acquire_mm23","text":"","code":"if (FALSE) { file <- acquire_mm23() data <- file |>           get_mm23_metadata()  my_mm23 <- acquire_mm23(\"~/data\") }"},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_prices.html","id":null,"dir":"Reference","previous_headings":"","what":"Download ONS shopping price dataset — acquire_prices","title":"Download ONS shopping price dataset — acquire_prices","text":"acquire_prices() mainly wrapper download file stored prices_url(). can optionally specify save downloaded file.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_prices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download ONS shopping price dataset — acquire_prices","text":"","code":"acquire_prices(path)"},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_prices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download ONS shopping price dataset — acquire_prices","text":"path Folder put downloaded data . missing tempfile created.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_prices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download ONS shopping price dataset — acquire_prices","text":"file path name downloaded file.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/acquire_prices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download ONS shopping price dataset — acquire_prices","text":"","code":"if (FALSE) { file <- acquire_prices()  my_prices <- acquire_prices(\"~/data\") }"},{"path":"https://foodchainstats.github.io/mm23/reference/contribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate contribution of a series to 'all items' 12 month rate — contribution","title":"Calculate contribution of a series to 'all items' 12 month rate — contribution","text":"contribution function implements formula calculating contribution cpi component parent level, set ONS CPI Technical Manual. function must applied unchained index. unchain() function can used unchain series. formula valid data 2018 CPI weights updated twice year, set . \\(c = component\\ c\\) \\(=\\ '\\ items'\\ CPI\\ index\\) \\(W^c_{y} = weight\\ \\ component\\ c\\ \\ year\\ y\\) \\(^c_t = index\\ \\ component\\ c\\ \\ month\\ t\\ based\\ \\ January\\ \\ current\\ year =100\\) \\(^a_{Jan} = \\ items\\ index\\ \\ January\\ based\\ \\ previous\\ month\\ (December) = 100\\) \\(^a_{Dec} = \\ items\\ index\\ \\ December\\ based\\ \\ previous\\ January = 100\\) $$ (\\frac{W^c_{y-1}} {W^a_{y-1}}) \\times (\\frac{({^c_{Dec}} - {^c_{t-12}})}{^a_{t-12}}) \\times 100 \\ \\ +\\ \\ (\\frac{W^c_y}{W^a_y}) \\times (\\frac{({^c_{Jan}}-100)}{^a_{t-12}}) \\times ^a_{Dec} \\ \\ +\\ \\ (\\frac{W^c_y}{W^a_y}) \\times (\\frac{(^c_t - 100)}{^a_{t-12}}) \\times \\frac{^a_{Jan}}{100} \\times ^a_{Dec} $$ apply contribution() wide dataframe: one field containing dates series, columns containing relevant series indices weights.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/contribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate contribution of a series to 'all items' 12 month rate — contribution","text":"","code":"contribution(   month,   all_items_index,   all_items_weight,   component_index,   component_weight )"},{"path":"https://foodchainstats.github.io/mm23/reference/contribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate contribution of a series to 'all items' 12 month rate — contribution","text":"month month number all_items_index items (category) index all_items_weight items (category) weight component_index Component item index component_weight Component item weight","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/contribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate contribution of a series to 'all items' 12 month rate — contribution","text":"contribution value","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/contribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate contribution of a series to 'all items' 12 month rate — contribution","text":"","code":"if (FALSE) { bread = contribution(month = month(date),   all_items_index = L523,   all_items_weight = L5CZ,   component_index = L52I,   component_weight = L5DH) }"},{"path":"https://foodchainstats.github.io/mm23/reference/get_cpih_cdid_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a reference table of CPIH CDIDs — get_cpih_cdid_lookup","title":"Get a reference table of CPIH CDIDs — get_cpih_cdid_lookup","text":"Get reference table CPIH CDIDs","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_cpih_cdid_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a reference table of CPIH CDIDs — get_cpih_cdid_lookup","text":"","code":"get_cpih_cdid_lookup()"},{"path":"https://foodchainstats.github.io/mm23/reference/get_cpih_cdid_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a reference table of CPIH CDIDs — get_cpih_cdid_lookup","text":"data frame CDIDs overall index, weight, 1 month rate 12 month rate CPIH series. Can useful reference table.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_cpih_cdid_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a reference table of CPIH CDIDs — get_cpih_cdid_lookup","text":"","code":"if (FALSE) { lookup <- get_cpih_cdid_lookup() }"},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates mm23 metadata — get_mm23_metadata","title":"Creates mm23 metadata — get_mm23_metadata","text":"Creates mm23 metadata","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates mm23 metadata — get_mm23_metadata","text":"","code":"get_mm23_metadata(rawfile)"},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates mm23 metadata — get_mm23_metadata","text":"rawfile downloaded mm23.csv file. missing attempt download ONS.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates mm23 metadata — get_mm23_metadata","text":"tibble containing mm23 metadata","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates mm23 metadata — get_mm23_metadata","text":"","code":"if (FALSE) { url <- \"https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/ datasets/consumerpriceindices/current/mm23.csv\"     tmp <- tempfile() download.file(url, tmp) rawfile <- tmp get_mm23_metadata(rawfile) }"},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Get monthly mm23 data — get_mm23_month","title":"Get monthly mm23 data — get_mm23_month","text":"Get monthly mm23 data","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get monthly mm23 data — get_mm23_month","text":"","code":"get_mm23_month(rawfile)"},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get monthly mm23 data — get_mm23_month","text":"rawfile downloaded mm23.csv file. missing attempt download ONS.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get monthly mm23 data — get_mm23_month","text":"tibble containing date, CDID value.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get monthly mm23 data — get_mm23_month","text":"","code":"if (FALSE) { url <- \"https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/ datasets/consumerpriceindices/current/mm23.csv\"     tmp <- tempfile() download.file(url, tmp) rawfile <- tmp get_mm23_month(rawfile) }"},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_quarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get quarterly mm23 data — get_mm23_quarter","title":"Get quarterly mm23 data — get_mm23_quarter","text":"Get quarterly mm23 data","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_quarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get quarterly mm23 data — get_mm23_quarter","text":"","code":"get_mm23_quarter(rawfile)"},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_quarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get quarterly mm23 data — get_mm23_quarter","text":"rawfile downloaded mm23.csv file. missing attempt download ONS.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_quarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get quarterly mm23 data — get_mm23_quarter","text":"tibble containing date, CDID value.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_quarter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get quarterly mm23 data — get_mm23_quarter","text":"","code":"if (FALSE) { url <- \"https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/ datasets/consumerpriceindices/current/mm23.csv\"     tmp <- tempfile() download.file(url, tmp) rawfile <- tmp get_mm23_month(rawfile) }"},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Get yearly mm23 data — get_mm23_year","title":"Get yearly mm23 data — get_mm23_year","text":"Get yearly mm23 data","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get yearly mm23 data — get_mm23_year","text":"","code":"get_mm23_year(rawfile)"},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get yearly mm23 data — get_mm23_year","text":"rawfile downloaded mm23.csv file. missing attempt download ONS.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get yearly mm23 data — get_mm23_year","text":"tibble containing date, CDID value.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_mm23_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get yearly mm23 data — get_mm23_year","text":"","code":"if (FALSE) { url <- \"https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/ datasets/consumerpriceindices/current/mm23.csv\"     tmp <- tempfile() download.file(url, tmp) rawfile <- tmp get_mm23_month(rawfile) }"},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get average price data from the ONS Shopping Price tool — get_price_data","title":"Get average price data from the ONS Shopping Price tool — get_price_data","text":"Get average price data ONS Shopping Price tool","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get average price data from the ONS Shopping Price tool — get_price_data","text":"","code":"get_price_data(file)"},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get average price data from the ONS Shopping Price tool — get_price_data","text":"file spreadsheet download price data","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get average price data from the ONS Shopping Price tool — get_price_data","text":"tidy dataset average prices","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get average price data from the ONS Shopping Price tool — get_price_data","text":"","code":"if (FALSE) { data <- get_price_data() }"},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get average price metadata from the ONS Shopping Price tool — get_price_metadata","title":"Get average price metadata from the ONS Shopping Price tool — get_price_metadata","text":"Get average price metadata ONS Shopping Price tool","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get average price metadata from the ONS Shopping Price tool — get_price_metadata","text":"","code":"get_price_metadata(file)"},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get average price metadata from the ONS Shopping Price tool — get_price_metadata","text":"file spreadsheet download price data","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get average price metadata from the ONS Shopping Price tool — get_price_metadata","text":"dataset price metadata","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_price_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get average price metadata from the ONS Shopping Price tool — get_price_metadata","text":"","code":"if (FALSE) { metadata <- get_price_metadata() }"},{"path":"https://foodchainstats.github.io/mm23/reference/get_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a weights dataset — get_weights","title":"Create a weights dataset — get_weights","text":"Create weights dataset","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a weights dataset — get_weights","text":"","code":"get_weights(rawfile, measure = \"cpi\")"},{"path":"https://foodchainstats.github.io/mm23/reference/get_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a weights dataset — get_weights","text":"rawfile downloaded mm23.csv file. missing attempt download ONS. measure inflation figure get weights . Defaults \"CPI\", can \"CPIH\"","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a weights dataset — get_weights","text":"dataframe monthly weights, including January weights exposed mm23 available reference tables spreadsheet.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/get_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a weights dataset — get_weights","text":"","code":"if (FALSE) { weights <- get_weights() cpih_weights <- get_weights(measure = \"cpih\") }"},{"path":"https://foodchainstats.github.io/mm23/reference/mm23_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Default url for the current mm23 dataset — mm23_url","title":"Default url for the current mm23 dataset — mm23_url","text":"Default url current mm23 dataset","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/mm23_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default url for the current mm23 dataset — mm23_url","text":"","code":"mm23_url()"},{"path":"https://foodchainstats.github.io/mm23/reference/mm23_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default url for the current mm23 dataset — mm23_url","text":"url mm23 data","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/mm23_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default url for the current mm23 dataset — mm23_url","text":"","code":"url <- mm23_url()"},{"path":"https://foodchainstats.github.io/mm23/reference/prices_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Default url for the CPI average prices spreadsheet — prices_url","title":"Default url for the CPI average prices spreadsheet — prices_url","text":"clear yet url stable, need test future months.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/prices_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default url for the CPI average prices spreadsheet — prices_url","text":"","code":"prices_url()"},{"path":"https://foodchainstats.github.io/mm23/reference/prices_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default url for the CPI average prices spreadsheet — prices_url","text":"url data download spreadsheet","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/prices_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default url for the CPI average prices spreadsheet — prices_url","text":"","code":"url <- prices_url()"},{"path":"https://foodchainstats.github.io/mm23/reference/reftables_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Default url for the CPI reference tables spreadsheet — reftables_url","title":"Default url for the CPI reference tables spreadsheet — reftables_url","text":"clear yet url stable, need test future months.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/reftables_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default url for the CPI reference tables spreadsheet — reftables_url","text":"","code":"reftables_url()"},{"path":"https://foodchainstats.github.io/mm23/reference/reftables_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default url for the CPI reference tables spreadsheet — reftables_url","text":"url reference tables","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/reftables_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default url for the CPI reference tables spreadsheet — reftables_url","text":"","code":"url <- reftables_url()"},{"path":"https://foodchainstats.github.io/mm23/reference/unchain.html","id":null,"dir":"Reference","previous_headings":"","what":"Unchains a CPI series — unchain","title":"Unchains a CPI series — unchain","text":"Use dplyr::mutate() calculate unchained index. Requires dataset month variable, use something like lubridate::month(date) get month number, uses dplyr::lag() unchain using previous values. Assumes CPI weights change twice year.","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/unchain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unchains a CPI series — unchain","text":"","code":"unchain(month, value)"},{"path":"https://foodchainstats.github.io/mm23/reference/unchain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unchains a CPI series — unchain","text":"month month number index value index value","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/unchain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unchains a CPI series — unchain","text":"unchained index value","code":""},{"path":"https://foodchainstats.github.io/mm23/reference/unchain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unchains a CPI series — unchain","text":"","code":"if (FALSE) { library(mm23) library(dplyr) library(lubridate)  mm23 <- acquire_mm23() data <- get_mm23_month(mm23) wts <- get_cpih_weights()  food_unchained <- data |>  filter(cdid %in% c(\"L522\", \"L523\") & date >= \"2017-01-01\") |>   group_by(cdid) |>   mutate(     unchained_value = unchain(month(date), value)   ) |>   select(date, cdid, value = unchained_value)  }"}]
